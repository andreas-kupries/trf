# Visual C++ 2.x and 4.0 makefile for Trf @mFullVersion@ (@mDate@)
#
# See the file "doc/license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# CVS:	$Id$
# 

# Does not depend on the presence of any environment variables in
# order to compile tcl; all needed information is derived from 
# location of the compiler directories.

#
# Project directories
#
# ROOT    = top of source tree
#
# TMPDIR  = location where .obj files should be stored during build
#
# TOOLS32 = location of VC++ 32-bit development tools. Note that the
#	    VC++ 2.0 header files are broken, so you need to use the
#	    ones that come with the developer network CD's, or later
#	    versions of VC++.
#
# TCL     = location where Tcl is installed.
#
# PKZIP	  =	name and path to pkzip archiver application
#		(required for generation of binary distribution only)
#

ROOT		= ..
TMPDIR		= .
TOOLS32		= c:\msdev
TCL		= c:\tcl
TCLSH		= $(TCL)\bin\tclsh80.exe
TCLLIB		= $(TCL)\bin\tcl80.lib
PKZIP		= pkzip.exe


# Set this to the appropriate value of /MACHINE: for your platform
MACHINE	= IX86

# Comment the following line to compile with symbols
NODEBUG=1

# Comment out the following to use SSLeay for DES
#LIBDES=-DLIBDES_LIB_NAME=\"crypto32.dll\"

######################################################################
# Do not modify below this line
######################################################################

TRF		=	trf@mDosVersion@
TRFLIB		=	$(TRF).lib
TRFDLL		=	$(TRF).dll
INSTALLDIR	=	$(TCL)\lib\$(TRF)


TRFOBJS = \
	$(TMPDIR)\adler.obj \
	$(TMPDIR)\asc85code.obj \
	$(TMPDIR)\b64code.obj \
	$(TMPDIR)\bc_opt.obj \
	$(TMPDIR)\bc_util.obj \
	$(TMPDIR)\bincode.obj \
	$(TMPDIR)\binio.obj \
	$(TMPDIR)\blockcipher.obj \
	$(TMPDIR)\blowfish.obj \
	$(TMPDIR)\c_opt.obj \
	$(TMPDIR)\cipher.obj \
	$(TMPDIR)\convert.obj \
	$(TMPDIR)\crc.obj \
	$(TMPDIR)\crc_zlib.obj \
	$(TMPDIR)\des.obj \
	$(TMPDIR)\dig_opt.obj \
	$(TMPDIR)\digest.obj \
	$(TMPDIR)\haval.obj \
	$(TMPDIR)\hexcode.obj \
	$(TMPDIR)\idea.obj \
	$(TMPDIR)\init.obj \
	$(TMPDIR)\libdes.obj \
	$(TMPDIR)\md5.obj \
	$(TMPDIR)\octcode.obj \
	$(TMPDIR)\rc4.obj \
	$(TMPDIR)\registry.obj \
	$(TMPDIR)\rs_ecc.obj \
	$(TMPDIR)\sha.obj \
	$(TMPDIR)\unstack.obj \
	$(TMPDIR)\util.obj \
	$(TMPDIR)\uucode.obj \
	$(TMPDIR)\zip.obj \
	$(TMPDIR)\zip_opt.obj \
	$(TMPDIR)\zlib.obj \
	$(TMPDIR)\tclLoadWin.obj


PATH=$(TOOLS32)\bin;$(PATH)

cc32		= $(TOOLS32)\bin\cl.exe
link32		= $(TOOLS32)\bin\link.exe
rc32		= $(TOOLS32)\bin\rc.exe
include32	= -I$(TOOLS32)\include
CP      	= copy
RM      	= del

WINDIR          = $(ROOT)\win
GENERICDIR	= $(ROOT)\generic

TRF_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR) -I$(ROOT) -I$(TCL)\include
TRF_DEFINES	= -nologo -D__WIN32__ -DHAVE_STDLIB_H $(LIBDES)

# meaning of -nologo ?
#!include <ntwin32.mak> # thats this for?


TRF_CFLAGS	=	$(cdebug) $(cflags) $(cvarsdll) $(include32) \
			$(TRF_INCLUDES) $(TRF_DEFINES)
CON_CFLAGS	=	$(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE
DOS_CFLAGS	=	$(cdebug) $(cflags) $(include16) -AL 

######################################################################
# Link flags
######################################################################

!IFDEF NODEBUG
ldebug = /RELEASE
!ELSE
ldebug = -debug:full -debugtype:cv
!ENDIF

# declarations common to all linker options
lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
DLLENTRY = @12
lflags   = $(lcommon) -align:0x1000 /MACHINE:$(MACHINE)
!ELSE
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ENDIF

conlflags = $(lflags) -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll

!IF "$(MACHINE)" == "PPC"
libc = libc.lib
libcdll = crtdll.lib
!ELSE
libc = libc.lib oldnames.lib
libcdll = msvcrt.lib oldnames.lib
!ENDIF

baselibs   = kernel32.lib $(optlibs) advapi32.lib
winlibs    = $(baselibs) user32.lib gdi32.lib comdlg32.lib winspool.lib

guilibs	   = $(libc) $(winlibs)
conlibs	   = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

######################################################################
# Compile flags
######################################################################

!IFDEF NODEBUG
cdebug = -Ox
!ELSE
cdebug = -Z7 -Od -WX
!ENDIF

# declarations common to all compiler options
ccommon = -c -W3 -nologo -YX -Dtry=__try -Dexcept=__except

!IF "$(MACHINE)" == "IX86"
cflags = $(ccommon) -D_X86_=1
!ELSE
!IF "$(MACHINE)" == "MIPS"
cflags = $(ccommon) -D_MIPS_=1
!ELSE
!IF "$(MACHINE)" == "PPC"
cflags = $(ccommon) -D_PPC_=1
!ELSE
!IF "$(MACHINE)" == "ALPHA"
cflags = $(ccommon) -D_ALPHA_=1
!ENDIF
!ENDIF
!ENDIF
!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL

######################################################################
# Project specific targets
######################################################################

release:    $(TRFDLL)
all:	    $(TRFDLL)
test:	    $(TRFDLL)
	$(TCLSH) <<
		load $(TRFDLL)
		cd ../tests
		source all
<<
install:	$(TRFDLL)
	-@md $(INSTALLDIR)
	$(CP) $(TRFDLL)              $(INSTALLDIR)\$(TRFDLL)
	$(CP) $(WINDIR)\pkgIndex.tcl $(INSTALLDIR)\pkgIndex.tcl


$(TRFDLL): $(TRFOBJS)
	$(link32) $(ldebug) $(dlllflags) $(TCLLIB) \
		$(guilibsdll) -out:$(TRFDLL) $(TRFOBJS)

bindist:      $(TRFDLL)
	-@md	$(TRF)
	-@$(CP)	$(TRFDLL)		$(TRF)\$(TRFDLL)
	-@$(CP)	$(WINDIR)\pkgIndex.tcl	$(TRF)\pkgIndex.tcl
	$(PKZIP) -r $(TRF)bin.zip $(TRF)\*.*
	-@$(RM)	$(TRF)\$(TRFDLL)
	-@$(RM)	$(TRF)\pkgIndex.tcl
	-@rd	$(TRF)

#
# Implicit rules
#

{$(WINDIR)}.c{$(TMPDIR)}.obj:
    $(cc32) $(TRF_CFLAGS) -Fo$(TMPDIR)\ $<

{$(GENERICDIR)}.c{$(TMPDIR)}.obj:
    $(cc32) $(TRF_CFLAGS) -Fo$(TMPDIR)\ $<

{$(ROOT)\compat}.c{$(TMPDIR)}.obj:
    $(cc32) $(TRF_CFLAGS) -Fo$(TMPDIR)\ $<

{$(WINDIR)}.rc{$(TMPDIR)}.res:
	$(rc32) -fo $@ -r -i $(GENERICDIR) -i $(WINDIR) -D__WIN32__ \
		$(TRF_DEFINES) $<

clean:
        -@del *.exp 
	-@del *.lib 
	-@del *.dll 
	-@del *.pch
        -@del $(TMPDIR)\*.obj
