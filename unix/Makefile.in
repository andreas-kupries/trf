#
# This file is a Makefile for TRF.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the
# actual Makefile.
# $Id$

EXTENSION	=	Trf
VERSION		=	@TRF_VERSION@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Directory in which the source of this extension can be found
srcdir		=	@srcdir@

# Directories in which the tcl core can be found
TCL_INCLUDE_DIR		=	@TCL_INCLUDE_DIR@
TCL_LIB_DIR		=	@TCL_LIB_DIR@
TCL_LIB			=	@TCL_LIB@


# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix		=	@prefix@
exec_prefix	=	@exec_prefix@

# Directory containing scripts supporting the work of this makefile
tool		=	$(srcdir)/tools


# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT =


# Directory where libtrf.a is at run-time:
LIB_RUNTIME_DIR =	$(exec_prefix)/lib/$(EXTENSION)$(VERSION)


# Directory in which to install the archive libtrf.a:
LIB_INSTALL_DIR =	$(INSTALL_ROOT)$(LIB_RUNTIME_DIR)


# Directory in which to install the extended shell tclsh:
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/bin


# Directory in which to install the include file transform.h:
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/include


# Top-level directory in which to install manual entries:
MAN_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/man


# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS		=	-O

# options for libdes target
LIBDES_OPTS= -DRAND -DTERMIO
#-DNOCONST



# To disable ANSI-C procedure prototypes reverse the comment characters
# on the following lines:
PROTO_FLAGS =
#PROTO_FLAGS = -DNO_PROTOTYPE


# To enable memory debugging reverse the comment characters on the following
# lines.  Warning:  if you enable memory debugging, you must do it
# *everywhere*, including all the code that calls Tcl, and you must use
# ckalloc and ckfree everywhere instead of malloc and free.
MEM_DEBUG_FLAGS =
#MEM_DEBUG_FLAGS = -DTCL_MEM_DEBUG


# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =		/bin/sh


# Tcl used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL = $(tool)/install-sh -c


# The symbols below provide support for dynamic loading and shared
# libraries.  The values of the symbols are normally set by the
# configure script.  You shouldn't normally need to modify any of
# these definitions by hand.

TRF_SHLIB_CFLAGS = @TRF_SHLIB_CFLAGS@


# The symbol below provides support for dynamic loading and shared
# libraries.  See configure.in for a description of what it means.
# The values of the symbolis normally set by the configure script.

SHLIB_LD = @SHLIB_LD@


# Libraries to use when linking:  must include at least the dynamic
# loading library and the math library (in that order).  This
# definition is determined by the configure script.
ALL_LIBS =  $(TCL_LIB) @TCL_LIBS@ @LIBS@ @TRF_CC_SEARCH_FLAGS@

LIBS = @TRF_LD_SEARCH_FLAGS@ @SHARED_LIBS@

#TRF_LIB_FILE = libtrf.a

TRF_LIB_FILE	=	@TRF_LIB_FILE@
ZLIB_LIB_FILE	=	@ZLIB_LIB_FILE@
LIBDES_LIB_FILE	=	@LIBDES_LIB_FILE@

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------

INSTALL_PROGRAM =	$(INSTALL) -m 744
INSTALL_DATA =		$(INSTALL) -m 644
RANLIB =		@RANLIB@

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

CC		=	@CC@

CC_SWITCHES	=	$(CFLAGS) $(TRF_SHLIB_CFLAGS) $(CPPFLAGS)	\
			-DZ_LIB_NAME=\"$(ZLIB_LIB_FILE)\"		\
			-DLIBDES_LIB_NAME=\"$(LIBDES_LIB_FILE)\"	\
			$(LIBDES_OPTS) @TCL_DEFS@
# $(TCL_CC_SWITCHES)
CPPFLAGS	=	$(DEFINES) $(INCLUDES)

INCLUDES	=	-I. -I$(srcdir) -I$(TCL_INCLUDE_DIR)
DEFINES		=	$(PROTO_FLAGS) $(MEM_DEBUG_FLAGS) @DEFS@

HEADER		=	transform.h transformInt.h crc.h

SOURCES		=	$(BASE_SRC) $(CVT_SRC) $(MD_SRC) $(CRYPT_SRC) $(ECC_SRC) $(COMPRESS_SRC)
OBJECTS		=	$(BASE_OBJ) $(CVT_OBJ) $(MD_OBJ) $(CRYPT_OBJ) $(ECC_OBJ) $(COMPRESS_OBJ)

#		fundamentals of this library
BASE_SRC	=	zlib.c libdes.c init.c registry.c unstack.c binio.c
BASE_OBJ	=	zlib.o libdes.o init.o registry.o unstack.o binio.o @DL_OBJS@

#		conversions, base & algorithms
CVT_SRC		=	$(CVT_BASE_SRC) $(CVT_ALG_SRC)
CVT_OBJ		=	$(CVT_BASE_OBJ) $(CVT_ALG_OBJ)

#		utilities for conversions
CVT_BASE_SRC	=	convert.c util.c
CVT_BASE_OBJ	=	convert.o util.o

#		conversion algorithms
CVT_ALG_SRC	=	bincode.c hexcode.c octcode.c uucode.c b64code.c asc85code.c
CVT_ALG_OBJ	=	bincode.o hexcode.o octcode.o uucode.o b64code.o asc85code.o

#		message digests, base & 		algorithms
MD_SRC		=		dig_opt.c digest.c	crc.c md5.c haval.c sha.c adler.c crc_zlib.c
MD_OBJ		=		dig_opt.o digest.o	crc.o md5.o haval.o sha.o adler.o crc_zlib.o

#		encryption, base & algorithms
CRYPT_SRC	=	$(CRYPT_BASE_SRC) $(CRYPT_ALG_SRC)
CRYPT_OBJ	=	$(CRYPT_BASE_OBJ) $(CRYPT_ALG_OBJ)

#		encryption base
CRYPT_BASE_SRC	=	bc_opt.c blockcipher.c bc_util.c c_opt.c cipher.c
CRYPT_BASE_OBJ	=	bc_opt.o blockcipher.o bc_util.o c_opt.o cipher.o

#		encryption algorithms
CRYPT_ALG_SRC	=	idea.c blowfish.c des.c rc4.c
CRYPT_ALG_OBJ	=	idea.o blowfish.o des.o rc4.o

#		error correction
ECC_SRC		=	rs_ecc.c
ECC_OBJ		=	rs_ecc.o

#		compression, base
COMPRESS_SRC	=	zip_opt.c zip.c
COMPRESS_OBJ	=	zip_opt.o zip.o


#		initialization for tclsh with trf preloaded
TCLSH_OBJS	=	$(srcdir)/app/tclAppInit.o

DOCTEMP		=	doc/man.log	\
			doc/man.aux	\
			doc/man.toc	\
			doc/man.dvi	\
			doc/man.ps

APP		=	$(srcdir)/tclsh

LDFLAGS		=	@LD_FLAGS@
LOADLIBES	=	@TRF_BUILD_LIB_SPEC@ $(ALL_LIBS)


#-------------------------------------------------------#

all:	check-package depend library

clean:
	rm -f $(OBJECTS) $(TRF_LIB_FILE) $(APP) $(TCLSH_OBJS) $(DOCTEMP)
	rm -f TAGS depend *~ */*~ core*
	-mv Makefile.bak Makefile

distclean:	clean
	rm -f config.status config.cache config.log Makefile \
	patchlevel.h transform.h pkgIndex.tcl

install:	install-lib install-header @install_other@


install-lib: $(TRF_LIB_FILE)
	$(tool)/mkinstalldirs $(LIB_INSTALL_DIR)
	@echo "Installing $(TRF_LIB_FILE)"
	@$(INSTALL_DATA) $(TRF_LIB_FILE) $(LIB_INSTALL_DIR)
	@$(RANLIB) $(LIB_INSTALL_DIR)/$(TRF_LIB_FILE)
	@$(INSTALL_DATA) $(srcdir)/pkgIndex.tcl $(LIB_INSTALL_DIR)/pkgIndex.tcl


install-header:
	$(tool)/mkinstalldirs  $(INCLUDE_INSTALL_DIR)
	@echo "Installing transform.h"
	@$(INSTALL_DATA) $(srcdir)/transform.h $(INCLUDE_INSTALL_DIR)

install-bin:	application
	$(tool)/mkinstalldirs  $(BIN_INSTALL_DIR)
	@echo "Installing tclsh"
	@$(INSTALL_PROGRAM) $(APP) $(BIN_INSTALL_DIR)

#-------------------------------------------------------#

lib:	library

library:	depend $(TRF_LIB_FILE)
	@echo ... done

app:	application

application:	depend library $(APP)
	@echo ... done tclsh

depend:	$(HEADER) $(SOURCES)
	@MAKEDEPEND@ -D___MAKEDEPEND___ -- @MKDEP_FLAGS@ $(CC_SWITCHES) -- $(SOURCES)
	touch depend

#-------------------------------------------------------#

TAGS:
		etags *.[ch]

check-package:
	@mv $(srcdir)/MANIFEST /tmp/MANIFEST
	@$(tool)/get-manifest $(EXTENSION)
	@-diff /tmp/MANIFEST MANIFEST | sed -e 's/</missing:/' -e 's/>/added:  /' | $(tool)/skip-trash Makefile Makefile.bak depend patchlevel.h transform.h pkgIndex.tcl "config.*"
	@mv /tmp/MANIFEST $(srcdir)/MANIFEST


check:	test

test:	application
	TCL_LIBRARY=$(TCL_SRC_DIR)/library; export TCL_LIBRARY; \
	LD_LIBRARY_PATH="$(srcdir):$(TCL_LIB_DIR)"; export LD_LIBRARY_PATH; \
	echo cd $(srcdir)/tests \; source all | $(APP)

.c.o:
	$(CC) -c $(CC_SWITCHES) $< -o $@

tclLoadAix.o:	compat/tclLoadAix.c
	$(CC) -c $(CC_SWITCHES) compat/tclLoadAix.c -o $@

tclLoadDld.o:	compat/tclLoadDld.c
	$(CC) -c $(CC_SWITCHES) compat/tclLoadDld.c -o $@

tclLoadShl.o:	compat/tclLoadShl.c
	$(CC) -c $(CC_SWITCHES) compat/tclLoadShl.c -o $@

tclLoadAout.o:	compat/tclLoadAout.c
	$(CC) -c $(CC_SWITCHES) compat/tclLoadAout.c -o $@

tclLoadNone.o:	compat/tclLoadNone.c
	$(CC) -c $(CC_SWITCHES) compat/tclLoadNone.c -o $@

_eprintf.o:	compat/_eprintf.c
	$(CC) -c $(CC_SWITCHES) compat/_eprintf.c -o $@

#-------------------------------------------------------#

$(TRF_LIB_FILE):	$(OBJECTS)
	rm -f		$(TRF_LIB_FILE)
	@MAKE_LIB@
	$(RANLIB)	$(TRF_LIB_FILE)

$(APP): $(TCLSH_OBJS) $(TRF_LIB_FILE)
	$(CC) $(LDFLAGS) $(TCLSH_OBJS) $(LOADLIBES) -o $(APP)


#-------------------------------------------------------#
# support for external libraries (zlib, libdes)

zlibdir		=	$(srcdir)/zlib
libdesdir	=	$(srcdir)/libdes


ZLIB_SRC	=	\
			$(zlibdir)/adler32.c	$(zlibdir)/compress.c	$(zlibdir)/crc32.c	\
			$(zlibdir)/gzio.c	$(zlibdir)/uncompr.c	$(zlibdir)/deflate.c	\
			$(zlibdir)/trees.c	$(zlibdir)/zutil.c	$(zlibdir)/inflate.c 	\
			$(zlibdir)/infblock.c	$(zlibdir)/inftrees.c	$(zlibdir)/infcodes.c	\
			$(zlibdir)/infutil.c	$(zlibdir)/inffast.c

ZLIB_OBJ	=	\
			$(zlibdir)/adler32.o	$(zlibdir)/compress.o	$(zlibdir)/crc32.o	\
			$(zlibdir)/gzio.o	$(zlibdir)/uncompr.o	$(zlibdir)/deflate.o	\
			$(zlibdir)/trees.o	$(zlibdir)/zutil.o	$(zlibdir)/inflate.o	\
			$(zlibdir)/infblock.o	$(zlibdir)/inftrees.o	$(zlibdir)/infcodes.o	\
			$(zlibdir)/infutil.o	$(zlibdir)/inffast.o


LIBDES_SRC	=	\
			$(libdesdir)/cbc3_enc.c $(libdesdir)/cbc_cksm.c $(libdesdir)/cbc_enc.c	\
			$(libdesdir)/ncbc_enc.c $(libdesdir)/pcbc_enc.c $(libdesdir)/qud_cksm.c	\
			$(libdesdir)/cfb64ede.c $(libdesdir)/cfb64enc.c $(libdesdir)/cfb_enc.c	\
			$(libdesdir)/ecb3_enc.c $(libdesdir)/ecb_enc.c  $(libdesdir)/ede_enc.c	\
			$(libdesdir)/enc_read.c $(libdesdir)/enc_writ.c $(libdesdir)/fcrypt.c	\
			$(libdesdir)/ofb64ede.c $(libdesdir)/ofb64enc.c $(libdesdir)/ofb_enc.c	\
			$(libdesdir)/rand_key.c $(libdesdir)/read_pwd.c $(libdesdir)/set_key.c	\
			$(libdesdir)/rpc_enc.c  $(libdesdir)/str2key.c  $(libdesdir)/supp.c

LIBDES_OBJ	=	\
			$(libdesdir)/cbc3_enc.o $(libdesdir)/cbc_cksm.o $(libdesdir)/cbc_enc.o	\
			$(libdesdir)/ncbc_enc.o $(libdesdir)/pcbc_enc.o $(libdesdir)/qud_cksm.o	\
			$(libdesdir)/cfb64ede.o $(libdesdir)/cfb64enc.o $(libdesdir)/cfb_enc.o	\
			$(libdesdir)/ecb3_enc.o $(libdesdir)/ecb_enc.o  $(libdesdir)/ede_enc.o	\
			$(libdesdir)/enc_read.o $(libdesdir)/enc_writ.o $(libdesdir)/fcrypt.o	\
			$(libdesdir)/ofb64ede.o $(libdesdir)/ofb64enc.o $(libdesdir)/ofb_enc.o  \
			$(libdesdir)/rand_key.o $(libdesdir)/read_pwd.o $(libdesdir)/set_key.o	\
			$(libdesdir)/rpc_enc.o  $(libdesdir)/str2key.o $(libdesdir)/supp.o


zlib:	$(ZLIB_LIB_FILE)
	@echo ... done

$(ZLIB_LIB_FILE):	$(ZLIB_OBJ)
	rm -f		$(ZLIB_LIB_FILE)
	@MAKE_ZLIB@
	$(RANLIB)	$(ZLIB_LIB_FILE)


libdes:	$(LIBDES_LIB_FILE)
	@echo ... done

$(LIBDES_LIB_FILE):	$(LIBDES_OBJ)
	rm -f		$(LIBDES_LIB_FILE)
	@MAKE_LIBDES@
	$(RANLIB)	$(LIBDES_LIB_FILE)



#-------------------------------------------------------#
# DO NOT DELETE THIS LINE -- make depend depends on it.
