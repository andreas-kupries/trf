# -*- tcl -*-
# binio

node trf_binio {
    title       "Trf: The binio command"
    shortTitle  "binio"
    description "Trf commands: binio"
    parent      trf_misc

    contents {
	p "The [cmd binio] command has three sub commands:"

	definition_list {
	    term [strong "binio copy inChannel outChannel ?count?"]
	    term_definition {
		Copies from inChannel to outChannel, up to the number of bytes
		indicated by the optional count argument or up to end of file
		on inChannel. inChannel must have been opened for reading and
		outChannel must have been opened for writing. This operation
		returns the number of bytes copied, or -1 on error.
	    }

	    term [strong "binio pack outChannel format ?data1 data2 ...?"]
	    term_definition {
		Packs binary data onto outChannel, a channel that must have
		been opened for writing. The format argument determines how the
		optional data1 through datan arguments are interpreted. This
		operation returns the number of data items successfully packed
		on outChannel or -1 if an error occurred. If an error occurred,
		it is possible that some output has already occurred. The
		various specifications that can appear in the format string are
		explained below. This operation reorders the bytes of each
		datum to match the order expected on outChannel if its byte
		order is different from that of the architecture on which the
		Tcl command is being executed.
	    }

	    term [strong "binio unpack inChannel format ?var1 var2 ...?"]
	    term_definition {
		Unpacks binary data from inChannel into the named variables.
		The inChannel argument must denote a channel opened for
		reading. The format argument determines how the data obtained
		from the channel is translated into string representation and
		stored in the var1
		through varn variables. If any of the variables are not
		initialized then the command creates them as local variables.
		This operation returns the number of data items successfully
		unpacked from inChannel or -1 if an error occurred. If -1 is
		returned, it is possible that some input may already have
		occurred. The various format specifications that can appear in
		the format string are explained below. This operation reorders
		the bytes of each datum to match the byte order expected on the
		architecture on which the command is executed if it is
		different from the byte order that is in effect on inChannel.
	    }
	}

	p "
	And now the table of the format specifiers available to [cmd binio].
	It includes a comparison to [cmd {binary format}] of tcl 8.0 too."

	table border {
	    tr valign=top {Format Meaning {Meaning in 8.0}}
	    tr valign=top [list a  --	"string, '[strterm]'-padded"]
	    tr valign=top {A -- {string, space-padded}}
	    tr valign=top {b -- {binary digits, low-2-high}}
	    tr valign=top {B -- {binary digits, high-2-low}}
	    tr valign=top {c {signed int, 8 bit (char)} {see left}}
	    tr valign=top {C {unsigned int, 8 bit} --}
	    tr valign=top {d {signed int, 32 bit} {floating number, 64 bit}}
	    tr valign=top {D {signed int, 16 bit} --}
	    tr valign=top {f {floating number, 32 bit}	{see left}}
	    tr valign=top {F {floating number, 64 bit}	--}
	    tr valign=top {h -- {hex digits, low-2-high}}
	    tr valign=top {H -- {hex digits, high-2-low}}
	    tr valign=top {i -- {signed int, 32 bit, little endian}}
	    tr valign=top {I -- {signed int, 32 bit, big-endian}}
	    tr valign=top {l {signed int, 64 bit} --}
	    tr valign=top {L {unsigned int, 64 bit} --}
	    tr valign=top {o {signed int, 32 bit, octal} --}
	    tr valign=top {O {signed int, 16 bit, octal} --}
	    tr valign=top [list s \
		    "string, '[strterm]'-terminated" \
		    {signed int, 16 bit, little-endian}]
	    tr valign=top {S -- {signed int, 16 bit, big-endian}}
	    tr valign=top {u {unsigned int, 32 bit} --}
	    tr valign=top {U {unsigned int, 32 bit} --}
	    tr valign=top [list x {signed int, 32 bit, hex} "'[strterm]'"]
	    tr valign=top {X {signed int, 16 bit, hex}	{Set cursor relative}}
	    tr valign=top {@ -- {Set cursor absolute}}
	}

	p "
	There is a more subtle difference too. In contrast to [cmd binio],
	which uses the channel byteorder to determine the endianness of the
	written data [cmd {binary format}] requires an explicit
	specification. In general [cmd {binary format}] is much nearer to
	the perl equivalent ((un)pack), despite the names."
    }
}
